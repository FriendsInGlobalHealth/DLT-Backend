package dlt.dltbackendmaster.controller;

import java.util.Date;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import dlt.dltbackendmaster.domain.BeneficiaryVulnerability;
import dlt.dltbackendmaster.service.DAOService;

@RestController
@RequestMapping("/api/beneficiary-vulnerability")
public class BeneficiaryVulnerabilityController
{
    private final DAOService service;

    public BeneficiaryVulnerabilityController(DAOService service) {
        super();
        this.service = service;
    }

    @GetMapping(produces = "application/json")
    public ResponseEntity<List<BeneficiaryVulnerability>> getAll() {

        try {
            List<BeneficiaryVulnerability> vulnerabilities = service.getAll(BeneficiaryVulnerability.class);
            return new ResponseEntity<>(vulnerabilities, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping(consumes = "application/json", produces = "application/json")
    public ResponseEntity<BeneficiaryVulnerability> save(@RequestBody BeneficiaryVulnerability vulnerability) {

        if (vulnerability == null || vulnerability.getBeneficiary() == null
            || vulnerability.getVulnerability() == null) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }

        try {
            vulnerability.setDateCreated(new Date());
            BeneficiaryVulnerability createdVulnerability = (BeneficiaryVulnerability) service.Save(vulnerability);
            createdVulnerability = (BeneficiaryVulnerability) service.GetAllEntityByNamedQuery("BeneficiaryVulnerability.findByBeneficiaryAndVulnerability",
                                                                                               createdVulnerability.getBeneficiary()
                                                                                                                   .getId(),
                                                                                               createdVulnerability.getVulnerability()
                                                                                                                   .getId())
                                                                     .get(0);
            return new ResponseEntity<>(createdVulnerability, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping(consumes = "application/json", produces = "application/json")
    public ResponseEntity<BeneficiaryVulnerability> update(@RequestBody BeneficiaryVulnerability vulnerability) {

        if (vulnerability == null || vulnerability.getBeneficiary() == null
            || vulnerability.getVulnerability() == null) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }

        try {
            vulnerability.setDateUpdated(new Date());
            BeneficiaryVulnerability updatedVulnerability = service.update(vulnerability);
            return new ResponseEntity<>(updatedVulnerability, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
